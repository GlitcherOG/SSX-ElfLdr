name: Elfldr Autobuilds

on: [ push, pull_request ]
  #  push:
  #    branches: [ master ]
  #  pull_request:
#    branches: [ master ]
#  workflow_dispatch:

# todo: maybe a job to update and push to gh-pages branch
#   if a commit modifies files in docs/ or /mkdocs.yml

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # This techinically also "Installs" ps2sdk too.
      # TODO: CACHE THIS SO I DON'T KEEP HITTING GITHUB SERVERS.
      - name: Fetch and setup dependencies
        run: |
          export PS2DEV=$HOME/ps2dev
          export PS2SDK=$PS2DEV/ps2sdk
          export GSKIT=$PS2DEV/gsKit
          wget -q https://github.com/ps2dev/ps2dev/releases/download/latest/ps2dev-ubuntu-latest.tar.gz
          tar xf ps2dev-ubuntu-latest.tar.gz -C $HOME
          echo $PS2DEV/bin >> $GITHUB_PATH
          echo $PS2DEV/ee/bin >> $GITHUB_PATH
          echo $PS2DEV/iop/bin >> $GITHUB_PATH
          echo $PS2DEV/dvp/bin >> $GITHUB_PATH
          echo $PS2SDK/bin >> $GITHUB_PATH
          echo "PS2DEV=$PS2DEV" >> $GITHUB_ENV
          echo "PS2SDK=$PS2SDK" >> $GITHUB_ENV
          echo "GSKIT=$GSKIT" >> $GITHUB_ENV
          pip install mkdocs

      - name: Build elfldr (release) and package
        run: |
          cmake -B build -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain/ps2.cmake -DCMAKE_BUILD_TYPE=Release
          cmake --build build -t docs
          cmake --build build -t package

      - name: Build elfldr (debug) and package
        run: |
          cmake -B build_debug -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain/ps2.cmake -DCMAKE_BUILD_TYPE=Debug
          cmake --build build -t docs
          cmake --build build_debug -t package

      - name: Upload elfldr artifacts (release)
        uses: actions/upload-artifact@v4
        with:
          name: elfldr-release
          path: |
            build/packages/*
            !build/packages/_CPack_Packages

      - name: Upload elfldr artifacts (debug)
        uses: actions/upload-artifact@v4
        with:
          name: elfldr-debug
          path: |
            build_debug/packages/*
            !build_debug/packages/_CPack_Packages

  # If this commit has a tag attached to it we create a release
  # from the artifacts of this build job.
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - name: Fetch build artifacts
        if: ${{ github.ref_type == 'tag' }}
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Publish release
        if: ${{ github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          generate_release_notes:  true
          files: |
            elfldr-release/*
