/**
 * SSX-Elfldr
 *
 * (C) 2021-2022 Lily/modeco80 <lily.modeco80@protonmail.ch>
 * under the terms of the MIT license.
 */

#include <elfldr/ElfLoader.h>
#include <runtime/Assert.h>
#include <utils/utils.h>

#include "patch.h"

// Autogenerated version header
#include <elfldr/GameVersion.h>
#include <Version.h>

#include "VersionProbe.h"

const char* gHostFsPath = "host:";
elfldr::ElfLoader gLoader;

int main() {
#ifndef NDEBUG
	elfldr::util::DebugOut("SSX-ElfLdr version " ELFLDR_VERSION_TAG " (" __DATE__ " " __TIME__ ")");
#else
	elfldr::util::DebugOut("SSX-ElfLdr version " ELFLDR_VERSION_TAG);
#endif

	// Initialize loader services & probe the game version.
	// TODO: If config file found, parse it, load in the game version, and verify that
	// 		that binary exists.
	elfldr::InitLoader();
	elfldr::AutodetectGameVersion();

	const auto& gdata = elfldr::GetGameVersionData();

	if(gdata.game == elfldr::Game::Invalid) {
		// TODO: if config file, change this message to state "Invalid game configured in config file {config}".
		elfldr::util::DebugOut("No supported game could be detected alongside ElfLdr.");
		elfldr::util::DebugOut("Make sure elfldr is in the proper spot.");
		while(true)
			;
	}

	// TODO: only display if autodetecting
	elfldr::util::DebugOut("ElfLdr GameID: \"%s\"", gdata.GameID().CStr());

	// Load the ELF.
	{
		char elfPath[elfldr::util::MaxPath] {};
		strncpy(&elfPath[0], gHostFsPath, elfldr::util::MaxPath * sizeof(char));
		strcat(elfPath, gdata.GetGameBinary().CStr());

		ELFLDR_VERIFY(gLoader.LoadElf(elfPath));
	}

	auto ApplyPatch = [](elfldr::Patch* patch) {
		if(patch == nullptr)
			return;

		elfldr::util::DebugOut("Applying patch \"%s\"...", patch->GetName());
		if(!patch->IsCompatiable()) {
			elfldr::util::DebugOut("Patch \"%s\" is not compatible with the current game.", patch->GetName());
			return;
		}

		patch->Apply();
		elfldr::util::DebugOut("Finished applying patch \"%s\"...", patch->GetName());
	};

	ApplyPatch(elfldr::GetPatchById(0x00));
	ApplyPatch(elfldr::GetPatchById(0x01));

	// testing this patch for regular inclusion,
	// it will PROBABLY have a different ID
	ApplyPatch(elfldr::GetPatchById(0xE0));

	char* argv[1];
	argv[0] = elfldr::UBCast<char*>(gHostFsPath); // I hate this

	// Execute the elf
	gLoader.ExecElf(sizeof(argv) / sizeof(argv[0]), argv);

	// elfldr shouldn't return.
	while(true)
		;
}
